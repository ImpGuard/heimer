Lines
- When splitting a line of code into multiple lines, make sure it's still easy
  to read and understand

Naming
- Variables
    * Ideally clear enough to understand usage of the variable.
    * Camel case
    * Single-letter names are counters
- Methods & Functions
    * Camel case
- Files
    * Ideally one word, comments can describe file purpose
    * Camel case
- Classes
    * Camel case with first letter capitalized

Spacing
- No tabs, spaces only
- 4 spaces as indent
- Space after every comma
Ex.
    if spaceAfterComma( "code", "by", "wenson" ):
        print "Hooray"
    else:
        print "BOO"
- Space after opening parenthesis/bracket and before closing
  parenthesis/bracket, but not when there is only 1 or less arguments inside
  the parthesis
Ex.
    foo(1)
    bar()
    map["Hi"]
    sum( sum( 1, 2, sum( 1, 2, 3 ) ), 2, sum( 1, 2, 3 ) )
    if ( "Hello", "World" ) == helloWorld():
        print "Yea!"
- Space before and after binary operators

Comments
- Use #
- Capitalize first letter
- End with a period
- Comments must stand on a separate line above the code being commented on
Ex.
    -- CORRECT --
    # Answers the most important question of all
    if ("Answer to the universe" == 42):
        print "Yes"
    -- INCORRECT --
    if ("Answer to the universe" == 42): # Answers the most important question of all
        print "Yes"
- Special comments should be used for special cases:
    * "FIX ME" for code that does not work at the moment "HACK HACK" for code
    * that isn't pristine and should be rewritten if there is time

Doc Strings
- Docstrings use triple double-quote
- Use a docstring for every class to quickly explain the purpose of the class.
- Use a docstring for every file to quickly explain the purpose of the file.
- If what a function does and/or what it returns is not immediately obvious
  from its name, write a doc string to clarify the purpose, parameters, return
  value, and examples (if needed).

Misc.
- For string, use double quote
